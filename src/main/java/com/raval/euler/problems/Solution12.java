package com.raval.euler.problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.LongStream;
import java.util.stream.Stream;

/**
 *

 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?

 */

/**
 * Created by nikunj on 26/08/17.
 */
public class Solution12 {

    static Map<Long, Long> triangularMap = new HashMap<>();

    static class Information{
        Long index;
        Long value;
        Set<Long> factors;

        public Information(Long index) {
            this.index = index;
            this.value = findTriangularNumber(index);
            this.factors = Utility.findFactor(value);
        }

        @Override
        public String toString() {
            return "Information{" +
                    "index=" + index +
                    ", value=" + value +
                    ", factors.size " + factors.size() +
                    ", factors=" + factors +
                    '}';
        }
    }

    public static void main(String[] args) {
        System.out.println(
        Stream.iterate(1L, aLong -> aLong+1)
                .limit(15000)
                .map(Information::new)
                .filter(information -> information.factors.size()>500)
                .map(information -> information.value)
                .findFirst()
                .orElse(Long.MIN_VALUE));
    }

    static Long findTriangularNumber(long limit){
        if(triangularMap.containsKey(limit-1)){
            triangularMap.put(limit, triangularMap.get(limit-1)+limit);
            return triangularMap.get(limit);
        }
        return LongStream
                .range(1L, limit)
                .sum();
    }


}
